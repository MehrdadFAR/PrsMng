import sys
import pandas as pd
import os
import numpy as np
import csv

if __name__ == "__main__":

    arguments = sys.argv
    anEncoding = 'cp1252'

    trainingAddress = arguments[1]  #


    # Read the CSV file

    # option 1: This option works on mehrdad's system.
    def option_1():
        print("option-1 started")
        inData = pd.read_csv(trainingAddress, encoding=anEncoding, low_memory=False)
        print(inData.head())
        print(inData.describe())
        print("done")
        print(inData.iloc[4])


    # option 2: checking if python engine is any help - for me after 8 minutes still not finished
    def option_2():
        print("option-2 started")
        inData = pd.read_csv(trainingAddress, encoding=anEncoding, engine='python')
        print(inData.head())
        print("done")


    # option 3: this is to see if the issue is with saving the file in ur ram. essentially same as option1.
    def option_3():
        print("option-3 started")
        pd.read_csv(trainingAddress, encoding=anEncoding, low_memory=False)
        print('done')


    # option 4: This was the original code before i touch it. did not work for me.
    def option_4():
        print("option-4 started")
        x = open(trainingAddress)
        inData = pd.read_csv(x, encoding=anEncoding)
        print(inData.head())
        print("done")


    # option 5: checking if c engine helps. did not work for me.
    def option_5():
        print("option-5 started")
        x = open(trainingAddress)
        inData = pd.read_csv(x, encoding=anEncoding, engine='c')
        print(inData.head())
        print("done")


    # option 6:
    def option_6():
        print("option-6 started")
        import csv
        aList = []
        #with open(trainingAddress, encoding='cp1252') as csvfile:
        with open(trainingAddress) as csvfile:
            # csvfile.decode('cp1252').encode('utf-8')
            # cp1252
            reader = csv.reader(csvfile, delimiter=',')
            i = 0


            iter_obj = iter(reader)

            # infinite loop
            while True:
                try:
                    # get the next item
                    row = next(iter_obj)
                    print(row)
                except:
                    print(" exception ")
                    print(str(next(iter_obj)))
                    break

           # for row in reader:
              #  pass
                #try:
                    #print(row)
                #except:
                    #print("exception catched")
                   # print(str(row))
                #aList.append(row)
                #if i in [0, 1, 10 , 100, 200, 300, 3000, 3500, 4000, 4500, 984886, 984887, 984888, 984889]:
                    #print(i)
                    #print()
                    #print(row[62])
                    #print(row[63])
                    #print(row)
                    #print("--")
                #i += 1
            print('done')

    # option 7:
    def option_7():
        print("option-7 started")
        chunksize = 100000
        list = []
        for chunk in pd.read_csv(trainingAddress, chunksize=chunksize, encoding=anEncoding, low_memory=False, delimiter=','):
            list.append(chunk)
            print(chunk.head())
        print("number of data frames in this list: ", len(list))

        #inData = pd.read_csv(trainingAddress, encoding=anEncoding, dtype=str)
        #print(inData.head())
        print("Gelukkig")

    def option_8():
        print("option-8 started")
        import dask.dataframe as dd
        inData = dd.read_csv(trainingAddress)
        print(inData.head())
        print(inData.describe())
        print("done")
        print(inData.ilock[88000])

    def option_9():
        file = [dict(line) for line in csv.DictReader(open(trainingAddress, 'r'))]
        print(file)



    # **** tests each of these by un-commenting it. only one to be uncommented in each test. ****
    #option_1()
    #option_2()
    #option_3()
    #option_4()
    #option_5()
    #option_6()
    option_7()
    #option_8()
    #option_9()